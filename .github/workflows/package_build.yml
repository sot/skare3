name: Build Ska Package
on:
  workflow_call:
    inputs:
      repository:
        description: Repository to build from
        required: false
        type: string
        default: ${GITHUB_REPOSITORY}
      tag:
        description: tag/ref/commit-sha
        required: false
        type: string
        default: ${GITHUB_SHA}
      noarch:
        description: Does not build arch-specific packages
        required: false
        type: boolean
        default: false
      python_version:
        description: Python version
        required: false
        type: string
        default: "3.12"
      numpy_version:
        description: Numpy version
        required: false
        type: string
        default: "1.26"
      miniconda_version:
        description: Miniconda version
        required: false
        type: string
        default: py39_4.12.0
      skare3_branch:
        description: Branch of skare3
        required: false
        type: string
        default: master
      channel:
        description: Ska Conda channel
        required: false
        type: string
        default: test
      with_conda_forge:
        description: Add conda-forge to the channel list
        required: false
        type: boolean
        default: false
      install_ska_helpers:
        description: Install ska_helpers and testr
        required: false
        type: boolean
        default: true
    secrets:
      CONDA_PASSWORD:
        required: true
      CHANDRA_XRAY_TOKEN:
        required: true
      token:
        required: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-13", "macos-latest", "windows-2022"]
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - name: Fetch
      uses: actions/checkout@v4
    - name: Show Inputs
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      run: |
        echo OS: ${{ matrix.os }}
        echo repository: \'${{ inputs.repository }}\'
        echo tag: \'${{ inputs.tag }}\'
        echo noarch: \'${{ inputs.noarch }}\'
        echo python_version: \'${{ inputs.python_version }}\'
        echo numpy_version: \'${{ inputs.numpy_version }}\'
        echo miniconda_version: \'${{ inputs.miniconda_version }}\'
        echo skare3_branch: \'${{ inputs.skare3_branch }}\'
    - name: Fetch Skare3
      uses: actions/checkout@v4
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      with:
        repository: sot/skare3
        ref: ${{ inputs.skare3_branch }}
        path: skare3
    - name: Fetch Skare3-tools
      uses: actions/checkout@v4
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      with:
        repository: sot/skare3_tools
        ref: master
        path: skare3_tools
    - name: Setup Conda Environment
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      uses: conda-incubator/setup-miniconda@v3.0.4
      with:
        miniforge-version: latest
        python-version: ${{ inputs.python_version }}
        activate-environment: conda-build
    - name: Set channels
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      run: |
        python --version
        echo "adding ${{ inputs.channel }} channel"
        conda config --add channels https://ska:${{ secrets.CONDA_PASSWORD }}@cxc.cfa.harvard.edu/mta/ASPECT/ska3-conda/${{ inputs.channel }}
        if [[ "${{ inputs.with_conda_forge }}" == "true" ]]
        then
          echo "adding conda-forge channel"
          conda config --add channels conda-forge
        fi
        conda config --remove channels defaults  # defaults is added "implicitly" by conda in the previous lines
        conda config --show-sources
        conda config --show channels
    - name: Update Conda Environment
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      run: |
        conda list ^python$ --export | grep python >> $CONDA_PREFIX/conda-meta/pinned
        conda env update -n conda-build -f ./skare3/build-environment.yml
    - name: Install ska_helpers
      if: ${{ inputs.install_ska_helpers && ((matrix.os == 'ubuntu-latest') || !inputs.noarch) }}
      run: |
        conda search ska_helpers
        err=$?
        if [ !$err ]
        then ${CONDA_EXE} install ska_helpers
        fi
        conda search testr
        err=$?
        if [ !$err ]
        then ${CONDA_EXE} install testr
        fi
    - name: Env List
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      run: conda list
    - name: Build Package
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      run: |
        arch_arg=`if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then echo; else echo '--arch-specific'; fi`
        python skare3_tools/actions/build/files/build.py $arch_arg ${{ inputs.repository }} --tag ${{ inputs.tag }} --python ${{ inputs.python_version }} --numpy ${{ inputs.numpy_version }} --skare3-branch ${{ inputs.skare3_branch }} -c https://ska:${{ secrets.CONDA_PASSWORD }}@cxc.cfa.harvard.edu/mta/ASPECT/ska3-conda/${{ inputs.channel }} -c conda-forge
      env:
        CONDA_PASSWORD: ${{ secrets.CONDA_PASSWORD }}
        GIT_USERNAME: chandra-xray
        GIT_ASKPASS: ${{ github.workspace }}/skare3_tools/actions/build/files/git_pass.py
        GIT_PASSWORD: ${{ secrets.CHANDRA_XRAY_TOKEN }}
    - name: Summary
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      run: |
        files=`find  builds/noarch/ builds/linux-64/ builds/osx-64/ builds/osx-arm64/ builds/win-64/ -not -name \*repodata\* -not -name index.html -not -name .ensure-non-empty-dir -type f`
        echo "## Packages Built:" >> $GITHUB_STEP_SUMMARY
        for f in $files; do echo "- $f" >> $GITHUB_STEP_SUMMARY; done;
    - name: Save package
      uses: actions/upload-artifact@v4
      if: ${{ (matrix.os == 'ubuntu-latest') || !inputs.noarch }}
      with:
        name: conda-package-${{ matrix.os }}
        path: |
          builds/noarch/
          builds/linux-64/
          builds/osx-64/
          builds/osx-arm64/
          builds/win-64/
          !builds/*/*repodata*
          !builds/*/index.html
